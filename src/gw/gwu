#!/usr/bin/env python3
from typing import Dict, Optional, List, Tuple, Callable, Any
import os
import argparse

# Importing placeholder modules that would contain actual implementations
from gwu_lib.gwu_lib import GwuLib

from lib.db.driver import Driver
import gwexport


class Gwu:
    def __init__(self):
        self.isolated = False
        self.base = None
        self.out_dir = ""
        self.old_gw = False
        self.raw_output = False
        self.separate_list: List[str] = []
        self.only_file = ""
        self.sep_limit = 0  # Default value would be set in actual implementation
        self.all_files = False

    def create_argument_parser(
        self, opts: gwexport.GwexportOpts
    ) -> argparse.ArgumentParser:
        parser = argparse.ArgumentParser()

        parser.add_argument( # displayed as '<BASE>'
            "<BASE>", help="Base name of the database", type=str, nargs='?'
        )
        parser.add_argument(
            "-odir",
            help="Create files from original name in directory (else on -o file)",
            type=str,
        )

        parser.add_argument(
            "-isolated",
            action="store_true",
            help="Export isolated persons (work only if export all database)",
        )

        parser.add_argument(
            "-old_gw",
            action="store_true",
            help="Do not export additional fields (for backward compatibility: < 7.00)",
        )

        parser.add_argument(
            "-raw",
            action="store_true",
            help="Raw output (without possible utf-8 conversion)",
        )

        parser.add_argument(
            "-sep",
            action="append",
            help='To use together with the option "-odir": separate this person and all ancestors',
        )

        parser.add_argument(
            "-sep_only_file",
            help='With option "-sep", tells to separate only groups of that file',
            type=str,
        )

        parser.add_argument(
            "-sep_limit",
            type=int,
            help='When using option "-sep", sets the limit for reconnecting isolated family groups',
        )

        parser.add_argument(
            "-all_files",
            action="store_true",
            help="Save all content of notes_d in the .gw file, including files without Wiki links",
        )

        # Add Gwexport options (placeholder)
        gwexport.add_arguments(parser)
        # Sort arguments for better help display

        return parser

    def main(self):
        opts = gwexport.GwexportOpts()  # Placeholder for default options
        parser = self.create_argument_parser(opts)
        args = parser.parse_args()

        base_name = args.__getattribute__("<BASE>")
        if not base_name:
            raise ValueError("Expect a database")


        with Driver.open_database(base_name) as base:
            select = gwexport.select(base, opts, [])
            in_dir = (
                base_name + ".gwb" if not base_name.endswith(".gwb") else base_name
            )

            src_oc_ht: Dict[str, Tuple[Any, Any, Callable]] = {}

            # Load required arrays
            Driver.load_ascends_array(base)
            Driver.load_strings_array(base)

            if not opts.mem:
                Driver.load_couples_array(base)
                Driver.load_unions_array(base)
                Driver.load_descends_array(base)

            # Get output file handler
            ofile, oc, close = opts.get_output_handlers()

            if not self.raw_output:
                oc("encoding: utf-8\n")

            oc("gwplus\n\n" if not self.old_gw else "\n")

            # Prepare and execute export
            GwuLib.prepare_free_occ(base)
            GwuLib.gwu(
                opts, self.isolated, base, in_dir, self.out_dir, src_oc_ht, select
            )

            # Close all open file handlers
            for _, (_, _, close_fn) in src_oc_ht.items():
                close_fn()
            close()


if __name__ == "__main__":
    Gwu().main()
